<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ch.interdiscount.microservices</groupId>
    <artifactId>inventory-service</artifactId>
    <version>0.0.1</version>
    <packaging>jar</packaging>

    <name>inventory-service</name>
    <description>Microservices - Intenvory Service</description>
    <url>https://github.com/interdiscount/inventory-service</url>

    <organization>
        <name>Interdiscount</name>
        <url>https://github.com/intergithubdiscount</url>
    </organization>

    <scm>
        <url>https://github.com/interdiscount/inventory-service</url>
        <connection>scm:git:git://github.com/interdiscount/inventory-service.git</connection>
        <developerConnection>scm:git:ssh://git@github.com/interdiscount/inventory-service.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <properties>
        <!-- general -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- java -->
        <java-source.version>11</java-source.version>
        <java-target.version>11</java-target.version>

        <!-- maven -->
        <maven-help-plugin.version>3.1.1</maven-help-plugin.version>
        <maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
        <!--<maven-surefire-plugin.version>2.22.1</maven-surefire-plugin.version>-->
        <!--<maven-surefire-plugin.version>3.0.0-M1</maven-surefire-plugin.version>-->
        <!--<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>-->
        <maven-site-plugin.version>3.7.1</maven-site-plugin.version>
        <maven-pmd-plugin.version>3.10.0</maven-pmd-plugin.version>
        <maven-findbugs-plugin.version>3.0.5</maven-findbugs-plugin.version>
        <xml-maven-plugin.version>1.0.2</xml-maven-plugin.version>
        <google-findbugs-xml-dependency.version>3.0.1</google-findbugs-xml-dependency.version>
        <maven-checkstyle-plugin.version>3.0.0</maven-checkstyle-plugin.version>
        <maven-surefire-report-plugin.version>2.22.1</maven-surefire-report-plugin.version>
        <jacoco-maven-plugin.version>0.8.2</jacoco-maven-plugin.version>
        <pitest-maven-plugin.version>1.4.3</pitest-maven-plugin.version>
        <sonar-maven-plugin-manag.version>3.5.0.1254</sonar-maven-plugin-manag.version>
        <maven-jxr-plugin.version>2.5</maven-jxr-plugin.version>
        <maven-project-info-reports-plugin.version>3.0.0</maven-project-info-reports-plugin.version>
        <javassist.version>3.23.1-GA</javassist.version>
        <mockito.version>2.20.0</mockito.version>

        <!-- spring -->
        <spring-boot.version>2.1.1.RELEASE</spring-boot.version>
        <spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>
        <!--<spring-kafka.version>2.1.7.RELEASE</spring-kafka.version>-->

        <!-- swagger -->
        <swagger.version>2.9.2</swagger.version>

        <!-- metrics -->
        <!--<project13-git-plugin.version>2.2.4</project13-git-plugin.version>-->
        <!--<micrometer-prometheus.version>1.0.4</micrometer-prometheus.version>-->

        <!-- tracing -->
        <!--<opentracing-spring-cloud-jaeger.version>0.2.0</opentracing-spring-cloud-jaeger.version>-->
        <!--<opentracing-kafka.version>0.0.12</opentracing-kafka.version>-->

        <!-- frontend -->
        <bootstrap.version>3.3.7</bootstrap.version>

        <!-- logging -->
        <slf4.version>1.7.25</slf4.version>

        <!-- others -->
        <jackson.version>2.9.3</jackson.version>
        <mapstruct.version>1.2.0.Final</mapstruct.version>
        <lombok.version>1.18.2</lombok.version>

        <!-- testing -->
        <spring-cloud-contract.version>2.0.2.RELEASE</spring-cloud-contract.version>
        <flapdoodle-embed-mongo.version>2.1.1</flapdoodle-embed-mongo.version>
        <!--<testcontainers.version>1.9.1</testcontainers.version>-->
        <rest-assured.version>3.2.0</rest-assured.version>
        <rest-assured-spring-mock-mvc.version>3.0.0</rest-assured-spring-mock-mvc.version>

        <!-- sonarqube configurations -->
        <!-- see https://docs.sonarqube.org/display/SONAR/Analysis+Parameters -->
        <!-- TODO replace with kubernetes url -->
        <sonar.host.url>http://localhost:9000</sonar.host.url>
        <!-- optional -->
        <!--<sonar.forceAuthentication>true</sonar.forceAuthentication>-->
        <!--<sonar.login>admin</sonar.login>-->
        <!--<sonar.password>admin</sonar.password>-->
        <!-- Value in minutes (default 30) -->
        <sonar.technicalDebt.developmentCost>60</sonar.technicalDebt.developmentCost>
        <!-- comma-separated list -->
        <sonar.exclusions>
            <!-- generic exclusions -->
            **/constants/**/*.java,
            **/domain/**/*.java,
            **/entities/**/*.java,
            **/daos/**/*.java,
            **/dtos/**/*.java,
            **/*Mock*.*
            <!-- special exclusions -->
            <!-- none -->
        </sonar.exclusions>
        <!--
          PLEASE NOTE (MatteoBaiguini):
          PMD, FindBugs and Checkstyle are already included as SonarQube plugins.
          We could just configure the quality profile properly.
         -->
        <sonar.java.pmd.reportPaths>target/pmd.xml</sonar.java.pmd.reportPaths>
        <sonar.findbugs.reportpaths>target/findbugs/xml/findbugsXml.xml</sonar.findbugs.reportpaths>
        <sonar.java.checkstyle.reportPaths>target/checkstyle/xml/checkstyle-result.xml</sonar.java.checkstyle.reportPaths>
        <sonar.junit.reportPaths>target/surefire-reports</sonar.junit.reportPaths>
        <sonar.jacoco.reportPaths>target/jacoco.exec</sonar.jacoco.reportPaths>
        <sonar.pitest.reportsDirectory>target/pit-reports</sonar.pitest.reportsDirectory>
        <sonar.pitest.mode>reuseReport</sonar.pitest.mode>
    </properties>

    <repositories>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <dependencies>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-oauth2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- swagger -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger.version}</version>
        </dependency>

        <!-- metrics -->
        <!--<dependency>-->
        <!--<groupId>pl.project13.maven</groupId>-->
        <!--<artifactId>git-commit-id-plugin</artifactId>-->
        <!--<version>${project13-git-plugin.version}</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>io.micrometer</groupId>-->
        <!--<artifactId>micrometer-registry-prometheus</artifactId>-->
        <!--<version>${micrometer-prometheus.version}</version>-->
        <!--</dependency>-->

        <!-- frontend -->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>${bootstrap.version}</version>
        </dependency>

        <!-- logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4.version}</version>
        </dependency>

        <!-- others -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-jdk8</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
            <optional>true</optional>
        </dependency>

        <!-- testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-contract-verifier</artifactId>
            <version>${spring-cloud-contract.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>de.flapdoodle.embed</groupId>
            <artifactId>de.flapdoodle.embed.mongo</artifactId>
            <version>${flapdoodle-embed-mongo.version}</version>
            <scope>test</scope>
        </dependency>
        <!--<dependency>-->
        <!--<groupId>org.testcontainers</groupId>-->
        <!--<artifactId>testcontainers</artifactId>-->
        <!--<version>${testcontainers.version}</version>-->
        <!--</dependency>-->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${rest-assured.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>spring-mock-mvc</artifactId>
            <version>${rest-assured-spring-mock-mvc.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- java 11 dependencies -->
        <dependency>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
            <version>${javassist.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>2.4.0-b180830.0438</version>
        </dependency>
        <!--<dependency>-->
        <!--<groupId>javax.xml.bind</groupId>-->
        <!--<artifactId>jaxb-api</artifactId>-->
        <!--<version>2.3.0</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>com.sun.xml.bind</groupId>-->
        <!--<artifactId>jaxb-impl</artifactId>-->
        <!--<version>2.3.0</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>org.glassfish.jaxb</groupId>-->
        <!--<artifactId>jaxb-runtime</artifactId>-->
        <!--<version>2.3.0</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>javax.activation</groupId>-->
        <!--<artifactId>activation</artifactId>-->
        <!--<version>1.1.1</version>-->
        <!--</dependency>-->
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <!-- spring -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <!--spring-cloud-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!-- general -->
        <finalName>${project.artifactId}</finalName>

        <!-- plugins -->
        <plugins>
            <!-- maven-help -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-help-plugin</artifactId>
                <version>${maven-help-plugin.version}</version>
                <!-- display active profile in compile phase -->
                <executions>
                    <execution>
                        <id>show-profiles</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>active-profiles</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- maven-compiler -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <fork>true</fork>
                    <source>${java-source.version}</source>
                    <target>${java-target.version}</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                    <compilerArgs>
                        <compilerArg>
                            -Amapstruct.unmappedTargetPolicy=WARN
                        </compilerArg>
                        <compilerArg>
                            -Amapstruct.defaultComponentModel=spring
                        </compilerArg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <!-- maven-surefire -->
            <!-- PLEASE NOTE: Jenkins X does not accept version as property -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <!--<version>${maven-surefire-plugin.version}</version>-->
                <version>3.0.0-M1</version>
                <configuration>
                    <systemPropertyVariables>
                        <os.arch>x86_64</os.arch>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <!-- maven-deploy -->
            <!-- required by Jenkins X -->
            <!-- PLEASE NOTE: Jenkins X does not accept any variables in here -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <!--<version>${maven-deploy-plugin.version}</version>-->
                <version>2.8.2</version>
            </plugin>

            <!-- maven-site -->
            <!--
              PLEASE NOTE (MatteoBaiguini):
              Run this ONLY ON PURPOSE because it will take a lot of time downloading an enormous number of dependencies
             -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>${maven-site-plugin.version}</version>
            </plugin>

            <!-- spring-boot -->
            <!-- see https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/maven-plugin/run-mojo.html#jvmArguments -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>build-info</goal>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <!-- Additional info added to Actuator info -->
                            <additionalProperties>
                                <java.source>${java-source.version}</java.source>
                                <java.target>${java-target.version}</java.target>
                                <build.encoding>${project.build.sourceEncoding}</build.encoding>
                                <reporting.encoding>${project.reporting.outputEncoding}</reporting.encoding>
                            </additionalProperties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- contract testing -->
            <plugin>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-contract-maven-plugin</artifactId>
                <version>${spring-cloud-contract.version}</version>
                <extensions>true</extensions>
                <configuration>
                    <nameSuffixForTests>ContractTest</nameSuffixForTests>
                    <!-- Default is MOCKMVC -->
                    <!--<testMode>EXPLICIT</testMode>-->
                    <baseClassForTests>ch.interdiscount.microservices.inventory.contracttesting.AbstractBaseContractTest</baseClassForTests>

                </configuration>
            </plugin>

            <!-- pmd - source code analyser -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>${maven-pmd-plugin.version}</version>
                <configuration>
                    <rulesets>
                        <ruleset>/category/java/bestpractices.xml</ruleset>
                        <ruleset>/category/java/codestyle.xml</ruleset>
                        <ruleset>/category/java/design.xml</ruleset>
                        <ruleset>/category/java/errorprone.xml</ruleset>
                        <ruleset>/category/java/multithreading.xml</ruleset>
                        <ruleset>/category/java/performance.xml</ruleset>
                    </rulesets>
                    <!-- Build doesn't fail if problems are found -->
                    <!--<failOnViolation>false</failOnViolation>-->
                </configuration>
                <!-- Execution to configure pmd:pmd to be executed at the end of maven test phase -->
                <!--<executions>-->
                <!--<execution>-->
                <!--<id>pmd-pmd</id>-->
                <!--<phase>compile</phase>-->
                <!--<goals>-->
                <!--<goal>pmd</goal>-->
                <!--</goals>-->
                <!--</execution>-->
                <!--</executions>-->
            </plugin>

            <!-- findbugs - static analysis -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>${maven-findbugs-plugin.version}</version>
                <configuration>
                    <!--
                      Enables analysis which takes more memory but finds more bugs.
                      If you run out of memory, changes the value of the effort element to 'Low'.
                     -->
                    <effort>Max</effort>
                    <!-- Bugs report level. Available values: Low (all), Medium (normal), Max (most important) -->
                    <threshold>Low</threshold>
                    <!-- Build doesn't fail if problems are found -->
                    <!--<failOnError>false</failOnError>-->
                    <onlyAnalyze>ch.interdiscount.microservices.inventory.*</onlyAnalyze>
                    <!-- PLEASE NOTE (MatteoBaiguini): Customized in order to let the XSLT plugin to translate XML to HTML -->
                    <findbugsXmlOutputDirectory>${project.build.directory}/findbugs/xml</findbugsXmlOutputDirectory>
                </configuration>
                <!-- Execution to configure findbugs:findbugs to be executed at the end of maven test phase -->
                <!--<executions>-->
                <!--<execution>-->
                <!--<id>findbugs-check</id>-->
                <!--<phase>compile</phase>-->
                <!--<goals>-->
                <!--<goal>findbugs</goal>-->
                <!--</goals>-->
                <!--</execution>-->
                <!--</executions>-->
            </plugin>
            <!-- PLEASE NOTE (MatteoBaiguini): required to transform FindBugs report from XML to HTML -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>xml-maven-plugin</artifactId>
                <version>${xml-maven-plugin.version}</version>
                <configuration>
                    <transformationSets>
                        <transformationSet>
                            <dir>${project.build.directory}/findbugs/xml</dir>
                            <outputDir>${project.build.directory}/findbugs/html</outputDir>
                            <stylesheet>default.xsl</stylesheet>
                            <fileMappers>
                                <fileMapper
                                        implementation="org.codehaus.plexus.components.io.filemappers.FileExtensionMapper">
                                    <targetExtension>Default.html</targetExtension>
                                </fileMapper>
                            </fileMappers>
                        </transformationSet>
                        <transformationSet>
                            <dir>${project.build.directory}/findbugs/xml</dir>
                            <outputDir>${project.build.directory}/findbugs/html</outputDir>
                            <stylesheet>fancy-hist.xsl</stylesheet>
                            <fileMappers>
                                <fileMapper
                                        implementation="org.codehaus.plexus.components.io.filemappers.FileExtensionMapper">
                                    <targetExtension>Fancy.html</targetExtension>
                                </fileMapper>
                            </fileMappers>
                        </transformationSet>
                        <transformationSet>
                            <dir>${project.build.directory}/findbugs/xml</dir>
                            <outputDir>${project.build.directory}/findbugs/html</outputDir>
                            <stylesheet>summary.xsl</stylesheet>
                            <fileMappers>
                                <fileMapper
                                        implementation="org.codehaus.plexus.components.io.filemappers.FileExtensionMapper">
                                    <targetExtension>Summary.html</targetExtension>
                                </fileMapper>
                            </fileMappers>
                        </transformationSet>
                    </transformationSets>
                </configuration>
                <!-- Execution to configure xslt:transform to be executed at the end of maven test phase -->
                <!--<executions>-->
                <!--<execution>-->
                <!--<id>xslt-transform</id>-->
                <!--<phase>compile</phase>-->
                <!--<goals>-->
                <!--<goal>transform</goal>-->
                <!--</goals>-->
                <!--</execution>-->
                <!--</executions>-->
                <dependencies>
                    <dependency>
                        <groupId>com.google.code.findbugs</groupId>
                        <artifactId>findbugs</artifactId>
                        <version>${google-findbugs-xml-dependency.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- checkstyle - code analysis -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <configuration>
                    <!-- Available values: sun_checks.xml (really strict, default) | google_checks.xml (not so strict) -->
                    <configLocation>google_checks.xml</configLocation>
                    <enableRSS>false</enableRSS>
                    <!-- Build doesn't fail if problems are found -->
                    <!--<failsOnError>false</failsOnError>-->
                    <outputFile>${project.build.directory}/checkstyle/xml/checkstyle-result.xml</outputFile>
                    <outputDirectory>${project.build.directory}/checkstyle/html</outputDirectory>
                </configuration>
                <!-- Execution to configure checkstyle:checkstyle to be executed at the end of maven test phase -->
                <!--<executions>-->
                <!--<execution>-->
                <!--<id>checkstyle-checkstyle</id>-->
                <!--<phase>compile</phase>-->
                <!--<goals>-->
                <!--<goal>checkstyle</goal>-->
                <!--</goals>-->
                <!--</execution>-->
                <!--</executions>-->
            </plugin>

            <!-- surefire-report - testing report -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>${maven-surefire-report-plugin.version}</version>
                <!-- Execution to configure surefire:report-only to be executed at the end of maven test phase -->
                <!--<executions>-->
                <!--<execution>-->
                <!--<id>surefire-report-report-only</id>-->
                <!--<phase>test</phase>-->
                <!--<goals>-->
                <!--<goal>report-only</goal>-->
                <!--</goals>-->
                <!--</execution>-->
                <!--</executions>-->
            </plugin>

            <!-- jacoco - code coverage -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin.version}</version>
                <configuration>
                    <excludes>
                        <!-- generic exclusions -->
                        <exclude>**/constants/**/*</exclude>
                        <exclude>**/domain/**/*</exclude>
                        <exclude>**/entities/**/*</exclude>
                        <exclude>**/daos/**/*</exclude>
                        <exclude>**/dtos/**/*</exclude>
                        <exclude>**/*Mock*.*</exclude>
                        <!-- special exclusions -->
                        <exclude>ch/interdiscount/microservices/inventory/events/listeners/*.*</exclude>
                        <exclude>ch/interdiscount/microservices/inventory/web/controllers/*Page*.*</exclude>
                    </excludes>
                    <!-- see https://www.eclemma.org/jacoco/trunk/doc/check-mojo.html -->
                    <rules>
                        <rule>
                            <element>PACKAGE</element>
                            <excludes>
                                <exclude>*Test</exclude>
                            </excludes>
                            <limits>
                                <limit>
                                    <counter>LINE</counter>
                                    <value>COVEREDRATIO</value>
                                    <minimum>0.75</minimum>
                                </limit>
                            </limits>
                        </rule>
                    </rules>
                </configuration>
                <executions>
                    <!--
                      Execution always required to prepare a property pointing to the JaCoCo runtime agent that
                      can be passed as a VM argument to the application under test.
                     -->
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <!-- Execution to configure jacoco:report to be executed at the end of maven test phase -->
                    <!--<execution>-->
                    <!--<id>jacoco-report</id>-->
                    <!--<phase>test</phase>-->
                    <!--<goals>-->
                    <!--<goal>report</goal>-->
                    <!--</goals>-->
                    <!--</execution>-->
                    <!-- Execution to properly configure jacoco:check -->
                    <execution>
                        <id>jacoco-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- pitest - mutation testing -->
            <!--
              PLEASE NOTE (MatteoBaiguini):
              Even though mutation testing reveals defects in code, it should be used wisely,
              because it is an extremely costly and time-consuming process.
             -->
            <plugin>
                <groupId>org.pitest</groupId>
                <artifactId>pitest-maven</artifactId>
                <version>${pitest-maven-plugin.version}</version>
                <configuration>
                    <withHistory>true</withHistory>
                    <timestampedReports>false</timestampedReports>
                    <outputFormats>
                        <outputFormat>HTML</outputFormat>
                        <outputFormat>XML</outputFormat>
                    </outputFormats>
                    <failWhenNoMutations>true</failWhenNoMutations>
                    <mutationThreshold>75</mutationThreshold>
                    <avoidCallsTo>
                        <avoidCallsTo>java</avoidCallsTo>
                        <avoidCallsTo>org.apache</avoidCallsTo>
                        <avoidCallsTo>org.slf4j</avoidCallsTo>
                        <avoidCallsTo>org.eclipse</avoidCallsTo>
                        <avoidCallsTo>lombok</avoidCallsTo>
                        <avoidCallsTo>org.springframework</avoidCallsTo>
                    </avoidCallsTo>
                    <excludedClasses>
                        <!-- generic exclusions -->
                        <excludedClass>*Mock*</excludedClass>
                        <!-- special exclusions -->
                        <excludedClass>ch.interdiscount.microservices.inventory.events.listeners*</excludedClass>
                        <excludedClass>ch.interdiscount.microservices.inventory.web.controllers.InventoryPage*
                        </excludedClass>
                    </excludedClasses>
                    <excludedTestClasses>
                        <excludedTestClass>ch.interdiscount.microservices.inventory.**.*FunctionalTest
                        </excludedTestClass>
                    </excludedTestClasses>
                    <verbose>true</verbose>
                </configuration>
                <!-- Execution to configure pitest:mutationCoverage to be executed at the end of maven test phase -->
                <!--<executions>-->
                <!--<execution>-->
                <!--<id>pitest-mutation-coverage</id>-->
                <!--<phase>test</phase>-->
                <!--<goals>-->
                <!--<goal>mutationCoverage</goal>-->
                <!--</goals>-->
                <!--</execution>-->
                <!--</executions>-->
            </plugin>

            <!-- sonarqube - quality analysis dashboard -->
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>${sonar-maven-plugin-manag.version}</version>
                <!-- Execution to configure sonar:sonar to be executed at the end of maven test phase -->
                <!--<executions>-->
                <!--<execution>-->
                <!--<id>sonar-sonar</id>-->
                <!--<phase>test</phase>-->
                <!--<goals>-->
                <!--<goal>sonar</goal>-->
                <!--</goals>-->
                <!--</execution>-->
                <!--</executions>-->
            </plugin>
        </plugins>
    </build>

    <reporting>
        <plugins>
            <!-- required by maven-surefire-report and pmd -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>${maven-jxr-plugin.version}</version>
            </plugin>
            <!-- required by maven-site -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven-project-info-reports-plugin.version}</version>
            </plugin>
        </plugins>
    </reporting>

    <profiles>
        <profile>
            <id>nexus-local-docker</id>

            <properties>
                <nexus-local.url>http://localhost:8081/repository</nexus-local.url>
            </properties>

            <repositories>
                <repository>
                    <id>maven-public</id>
                    <url>${nexus-local.url}/maven-public/</url>
                </repository>
            </repositories>

            <distributionManagement>
                <snapshotRepository>
                    <id>nexus-local-snapshots</id>
                    <url>${nexus-local.url}/maven-snapshots/</url>
                </snapshotRepository>

                <repository>
                    <id>nexus-local-releases</id>
                    <url>${nexus-local.url}/maven-releases/</url>
                </repository>
            </distributionManagement>
        </profile>
    </profiles>

</project>
